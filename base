do local base64={};base64.chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";local b64chars={};for i=1,65 do b64chars[string.sub(base64.chars,i,i)]=i-1 ;end base64.decode=function(data) data=string.gsub(data,"[^"   .. base64.chars   .. "=]" ,"");local bytes={};local j=1;for i=1, #data,4 do local c1=b64chars[string.sub(data,i,i)] or 0 ;local c2=b64chars[string.sub(data,i + 1 ,i + 1 )] or 0 ;local c3=b64chars[string.sub(data,i + 2 ,i + 2 )];local c4=b64chars[string.sub(data,i + 3 ,i + 3 )];bytes[j]=bit32.lshift(c1,2) + bit32.rshift(c2,4) ;j=j + 1 ;if c3 then bytes[j]=bit32.lshift(bit32.band(c2,15),4) + bit32.rshift(c3,2) ;j=j + 1 ;if c4 then bytes[j]=bit32.lshift(bit32.band(c3,3),6) + c4 ;j=j + 1 ;end end end local result="";for i=1, #bytes do result=result   .. string.char(bytes[i]) ;end return result;end;local scriptParts={"","","",""};local function loadEncodedScript() if game:GetService("Players").LocalPlayer then print("Chargement du script en cours...");end local start=tick();local completeScript=table.concat(scriptParts);scriptParts=nil;local decoded;local success,result=pcall(function() local co=coroutine.create(function() return base64.decode(completeScript);end);local status,decodedResult;local timeout=tick() + 10 ;repeat status,decodedResult=coroutine.resume(co);task.wait();until (coroutine.status(co)=="dead") or (tick()>timeout)  if status then return decodedResult;else error("Échec du décodage: "   .. tostring(decodedResult) );end end);if success then decoded=result;print("Décodage terminé en "   .. (tick() -start)   .. " secondes" );else warn("Erreur pendant le décodage: "   .. tostring(result) );return;end task.delay(0.1,function() local execStart=tick();local execSuccess,execError=pcall(function() loadstring(decoded)();end);if execSuccess then print("Script exécuté avec succès en "   .. (tick() -execStart)   .. " secondes" );else warn("Erreur d'exécution: "   .. tostring(execError) );end end);end loadEncodedScript();local function splitString(str,maxSize) local result={};for i=1, #str,maxSize do table.insert(result,string.sub(str,i,(i + maxSize) -1 ));end return result;end end
